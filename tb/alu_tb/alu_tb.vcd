$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $scope module osyrys64_pkg $end
   $var wire 7 , OPCODE_R [6:0] $end
   $var wire 7 - OPCODE_I [6:0] $end
   $var wire 7 . OPCODE_L [6:0] $end
   $var wire 7 / OPCODE_S [6:0] $end
   $var wire 7 0 OPCODE_B [6:0] $end
   $var wire 7 1 OPCODE_JAL [6:0] $end
   $var wire 7 2 OPCODE_JALR [6:0] $end
   $var wire 7 3 OPCODE_AUIPC [6:0] $end
   $var wire 7 4 OPCODE_LUI [6:0] $end
   $var wire 7 5 OPCODE_CUSTOM0 [6:0] $end
   $var wire 7 6 OPCODE_CUSTOM1 [6:0] $end
   $var wire 7 5 OPCODE_NPU_MATMUL [6:0] $end
   $var wire 7 5 OPCODE_NPU_CONV [6:0] $end
   $var wire 7 7 FUNCT7_MATRIX_MUL [6:0] $end
   $var wire 7 8 FUNCT7_CONVOLUTION [6:0] $end
   $var wire 2 9 NPU_OP_NONE [1:0] $end
   $var wire 2 : NPU_OP_MATMUL [1:0] $end
   $var wire 2 ; NPU_OP_CONV [1:0] $end
   $var wire 3 < F3_BYTE [2:0] $end
   $var wire 3 = F3_HALFWORD [2:0] $end
   $var wire 3 > F3_WORD [2:0] $end
   $var wire 3 ? F3_BYTE_U [2:0] $end
   $var wire 3 @ F3_HALFWORD_U [2:0] $end
   $var wire 3 A F3_WORD_U [2:0] $end
  $upscope $end
  $scope module alu_tb $end
   $var wire 64 # src1 [63:0] $end
   $var wire 64 % src2 [63:0] $end
   $var wire 8 ' alu_control [7:0] $end
   $var wire 64 ( alu_result [63:0] $end
   $scope module dut $end
    $var wire 64 # src1 [63:0] $end
    $var wire 64 % src2 [63:0] $end
    $var wire 8 ' alu_control [7:0] $end
    $var wire 64 ( alu_result [63:0] $end
    $var wire 5 * shamt32 [4:0] $end
    $var wire 32 + result32 [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b0000000000000000000000000000000000000000000000000000000000000001 #
b0000000000000000000000000000000000000000000000000000000000000001 %
b00001010 '
b0000000000000000000000000000000000000000000000000000000000000010 (
b00001 *
b00000000000000000000000000000010 +
b0110011 ,
b0010011 -
b0000011 .
b0100011 /
b1100011 0
b1101111 1
b1100111 2
b0010111 3
b0110111 4
b0001011 5
b0101011 6
b0000001 7
b0000010 8
b00 9
b01 :
b10 ;
b000 <
b001 =
b010 >
b100 ?
b101 @
b110 A
#1000
b0000000000000000000000000000000011111111111111111111111111111111 #
b0000000000000000000000000000000000000000000000000000000000000000 (
b00000000000000000000000000000000 +
#2000
b0000000000000000000000000000000000000000000000000000000000000101 #
b0000000000000000000000000000000000000000000000000000000000000011 %
b00001011 '
b0000000000000000000000000000000000000000000000000000000000000010 (
b00011 *
b00000000000000000000000000000010 +
#3000
b0000000000000000000000000000000000000000000000000000000000000011 #
b0000000000000000000000000000000000000000000000000000000000000101 %
b1111111111111111111111111111111111111111111111111111111111111110 (
b00101 *
b11111111111111111111111111111110 +
#4000
b0000000000000000000000000000000000000000000000000000000000000001 #
b0000000000000000000000000000000000000000000000000000000000000100 %
b00001100 '
b0000000000000000000000000000000000000000000000000000000000010000 (
b00100 *
b00000000000000000000000000010000 +
#5000
b0000000000000000000000000000000000000000000000000000000000010000 #
b0000000000000000000000000000000000000000000000000000000000000010 %
b00001101 '
b0000000000000000000000000000000000000000000000000000000000000100 (
b00010 *
b00000000000000000000000000000100 +
#6000
b0000000000000000000000000000000011111111111111111111111111110000 #
b00001110 '
b1111111111111111111111111111111111111111111111111111111111111100 (
b11111111111111111111111111111100 +
#7000
b0000000000000000000000000000000000000000000000000000000000010000 #
b0000000000000000000000000000000000000000000000000000000000000100 (
b00000000000000000000000000000100 +
#8000
#18000
