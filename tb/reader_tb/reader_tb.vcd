$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $scope module osyrys64_pkg $end
   $var wire 7 6 OPCODE_R [6:0] $end
   $var wire 7 7 OPCODE_I [6:0] $end
   $var wire 7 8 OPCODE_L [6:0] $end
   $var wire 7 9 OPCODE_S [6:0] $end
   $var wire 7 : OPCODE_B [6:0] $end
   $var wire 7 ; OPCODE_JAL [6:0] $end
   $var wire 7 < OPCODE_JALR [6:0] $end
   $var wire 7 = OPCODE_AUIPC [6:0] $end
   $var wire 7 > OPCODE_LUI [6:0] $end
   $var wire 7 ? OPCODE_NPU [6:0] $end
   $var wire 7 @ FUNCT7_MATRIX_MUL [6:0] $end
   $var wire 7 A FUNCT7_CONVOLUTION [6:0] $end
   $var wire 2 B NPU_OP_NONE [1:0] $end
   $var wire 2 C NPU_OP_MATMUL [1:0] $end
   $var wire 2 D NPU_OP_CONV [1:0] $end
   $var wire 3 E F3_BYTE [2:0] $end
   $var wire 3 F F3_HALFWORD [2:0] $end
   $var wire 3 G F3_WORD [2:0] $end
   $var wire 3 H F3_BYTE_U [2:0] $end
   $var wire 3 I F3_HALFWORD_U [2:0] $end
   $var wire 3 J F3_WORD_U [2:0] $end
  $upscope $end
  $scope module reader_tb $end
   $var wire 1 . clk $end
   $var wire 1 # rst $end
   $var wire 64 $ mem_data [63:0] $end
   $var wire 8 & be_mask [7:0] $end
   $var wire 3 ' f3 [2:0] $end
   $var wire 1 ( is_load_64 $end
   $var wire 1 ) valid_in $end
   $var wire 1 + ready_out $end
   $var wire 1 , read_stall $end
   $var wire 1 - valid $end
   $var wire 64 / wb_data [63:0] $end
   $scope module dut $end
    $var wire 1 . clk $end
    $var wire 1 # rst $end
    $var wire 64 $ mem_data [63:0] $end
    $var wire 8 & be_mask [7:0] $end
    $var wire 3 ' f3 [2:0] $end
    $var wire 1 ( is_load_64 $end
    $var wire 1 ) valid_in $end
    $var wire 1 + ready_out $end
    $var wire 1 , read_stall $end
    $var wire 1 - valid $end
    $var wire 64 / wb_data [63:0] $end
    $var wire 64 1 masked_data [63:0] $end
    $var wire 64 3 raw_data [63:0] $end
    $var wire 1 * sign_extend $end
    $var wire 1 , load_pending $end
    $scope module mask_apply $end
     $scope module unnamedblk1 $end
      $var wire 32 5 i [31:0] $end
     $upscope $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
1#
b0000000000000000000000000000000000000000000000000000000000000000 $
b00000000 &
b000 '
0(
0)
1*
1+
0,
0-
0.
b0000000000000000000000000000000000000000000000000000000000000000 /
b0000000000000000000000000000000000000000000000000000000000000000 1
b0000000000000000000000000000000000000000000000000000000000000000 3
b00000000000000000000000000001000 5
b0110011 6
b0010011 7
b0000011 8
b0100011 9
b1100011 :
b1101111 ;
b1100111 <
b0010111 =
b0110111 >
b0001011 ?
b0000001 @
b0000010 A
b00 B
b01 C
b10 D
b000 E
b001 F
b010 G
b100 H
b101 I
b110 J
#5000
0#
b0000000000000000000000000000000000000000000000000000000011111111 $
b00000001 &
1)
1-
1.
b1111111111111111111111111111111111111111111111111111111111111111 /
b0000000000000000000000000000000000000000000000000000000011111111 1
b0000000000000000000000000000000000000000000000000000000011111111 3
#10000
0.
#15000
0)
0+
1,
0-
1.
#20000
0.
#25000
1.
#30000
0.
#35000
b100 '
1)
0*
1+
0,
1-
1.
b0000000000000000000000000000000000000000000000000000000011111111 /
#40000
0.
#45000
0)
0+
1,
0-
1.
#50000
0.
#55000
1.
#60000
0.
#65000
b0000000000000000000000000000000000000000000000001111111111111111 $
b00000011 &
b001 '
1)
1*
1+
0,
1-
1.
b1111111111111111111111111111111111111111111111111111111111111111 /
b0000000000000000000000000000000000000000000000001111111111111111 1
b0000000000000000000000000000000000000000000000001111111111111111 3
#70000
0.
#75000
0)
0+
1,
0-
1.
#80000
0.
#85000
1.
#90000
0.
#95000
b101 '
1)
0*
1+
0,
1-
1.
b0000000000000000000000000000000000000000000000001111111111111111 /
#100000
0.
#105000
0)
0+
1,
0-
1.
#110000
0.
#115000
1.
#120000
0.
#125000
b0000000000000000000000000000000011111111111111111111111111111111 $
b00001111 &
b010 '
1)
1*
1+
0,
1-
1.
b1111111111111111111111111111111111111111111111111111111111111111 /
b0000000000000000000000000000000011111111111111111111111111111111 1
b0000000000000000000000000000000011111111111111111111111111111111 3
#130000
0.
#135000
0)
0+
1,
0-
1.
#140000
0.
#145000
1.
#150000
0.
#155000
b110 '
1)
0*
1+
0,
1-
1.
b0000000000000000000000000000000011111111111111111111111111111111 /
#160000
0.
#165000
0)
0+
1,
0-
1.
#170000
0.
#175000
1.
#180000
0.
#185000
b0001001000110100010101100111100010011010101111001101111011110000 $
b11111111 &
b011 '
1(
1)
1*
1+
0,
1-
1.
b0001001000110100010101100111100010011010101111001101111011110000 /
b0001001000110100010101100111100010011010101111001101111011110000 1
b0001001000110100010101100111100010011010101111001101111011110000 3
#190000
0.
#195000
0)
0+
1,
0-
1.
#200000
0.
#205000
1.
#210000
0.
#215000
1.
#220000
0.
#225000
1.
#230000
0.
#235000
1.
