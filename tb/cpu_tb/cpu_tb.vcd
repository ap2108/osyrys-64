$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $scope module osyrys64_pkg $end
   $var wire 7 D! OPCODE_R [6:0] $end
   $var wire 7 E! OPCODE_I [6:0] $end
   $var wire 7 F! OPCODE_L [6:0] $end
   $var wire 7 G! OPCODE_S [6:0] $end
   $var wire 7 H! OPCODE_B [6:0] $end
   $var wire 7 I! OPCODE_JAL [6:0] $end
   $var wire 7 J! OPCODE_JALR [6:0] $end
   $var wire 7 K! OPCODE_AUIPC [6:0] $end
   $var wire 7 L! OPCODE_LUI [6:0] $end
   $var wire 7 M! OPCODE_NPU [6:0] $end
   $var wire 7 N! FUNCT7_MATRIX_MUL [6:0] $end
   $var wire 7 O! FUNCT7_CONVOLUTION [6:0] $end
   $var wire 2 P! NPU_OP_NONE [1:0] $end
   $var wire 2 Q! NPU_OP_MATMUL [1:0] $end
   $var wire 2 R! NPU_OP_CONV [1:0] $end
   $var wire 3 S! F3_BYTE [2:0] $end
   $var wire 3 T! F3_HALFWORD [2:0] $end
   $var wire 3 U! F3_WORD [2:0] $end
   $var wire 3 V! F3_BYTE_U [2:0] $end
   $var wire 3 W! F3_HALFWORD_U [2:0] $end
   $var wire 3 X! F3_WORD_U [2:0] $end
  $upscope $end
  $scope module cpu_tb $end
   $var wire 1 4! clk $end
   $var wire 1 # rst_n $end
   $var wire 64 $ instr [63:0] $end
   $var wire 64 & read_data [63:0] $end
   $var wire 64 5! pc [63:0] $end
   $var wire 64 +! alu_result [63:0] $end
   $var wire 64 -! write_data [63:0] $end
   $var wire 1 ~ mem_write_enable $end
   $var wire 64 +! mem_addr [63:0] $end
   $var wire 1 7! npu_start_matrix_mul $end
   $var wire 1 8! npu_start_conv $end
   $var wire 1 ( npu_done $end
   $scope module uut $end
    $var wire 1 4! clk $end
    $var wire 1 # rst_n $end
    $var wire 64 $ instr [63:0] $end
    $var wire 64 & read_data [63:0] $end
    $var wire 64 5! pc [63:0] $end
    $var wire 64 +! alu_result [63:0] $end
    $var wire 64 -! write_data [63:0] $end
    $var wire 1 ~ mem_write_enable $end
    $var wire 64 +! mem_addr [63:0] $end
    $var wire 1 7! npu_start_matrix_mul $end
    $var wire 1 8! npu_start_conv $end
    $var wire 1 ( npu_done $end
    $var wire 64 5! pc_reg [63:0] $end
    $var wire 64 9! pc_next [63:0] $end
    $var wire 5 ) rs1 [4:0] $end
    $var wire 5 * rs2 [4:0] $end
    $var wire 5 + rd [4:0] $end
    $var wire 3 !! imm_source [2:0] $end
    $var wire 64 "! imm_ext [63:0] $end
    $var wire 64 : rs1_data [63:0] $end
    $var wire 64 < rs2_data [63:0] $end
    $var wire 64 : alu_in1 [63:0] $end
    $var wire 64 /! alu_in2 [63:0] $end
    $var wire 64 +! alu_out [63:0] $end
    $var wire 1 $! reg_write_en $end
    $var wire 1 %! mem_read $end
    $var wire 1 ~ mem_write $end
    $var wire 1 &! branch $end
    $var wire 1 '! alu_src $end
    $var wire 1 (! mem_to_reg $end
    $var wire 4 )! alu_control [3:0] $end
    $var wire 1 ;! is_npu_matrix_mul $end
    $var wire 1 <! is_npu_conv $end
    $var wire 1 1! alu_zero $end
    $var wire 1 =! stall_pc $end
    $scope module alu_unit $end
     $var wire 64 : src1 [63:0] $end
     $var wire 64 /! src2 [63:0] $end
     $var wire 8 *! alu_control [7:0] $end
     $var wire 64 +! alu_result [63:0] $end
     $var wire 5 2! shamt32 [4:0] $end
     $var wire 32 3! result32 [31:0] $end
    $upscope $end
    $scope module control_unit $end
     $var wire 7 , opcode [6:0] $end
     $var wire 3 - funct3 [2:0] $end
     $var wire 7 . funct7 [6:0] $end
     $var wire 4 )! alu_control [3:0] $end
     $var wire 1 $! reg_write_en $end
     $var wire 1 '! alu_src $end
     $var wire 1 %! mem_read $end
     $var wire 1 ~ mem_write $end
     $var wire 1 (! mem_to_reg $end
     $var wire 1 &! branch $end
     $var wire 1 ;! is_npu_matrix_mul $end
     $var wire 1 <! is_npu_conv $end
     $var wire 4 )! alu_control_enum [3:0] $end
    $upscope $end
    $scope module regfile_unit $end
     $var wire 1 4! clk $end
     $var wire 1 # rst_n $end
     $var wire 5 ) address1 [4:0] $end
     $var wire 5 * address2 [4:0] $end
     $var wire 5 + address3 [4:0] $end
     $var wire 64 : read_data1 [63:0] $end
     $var wire 64 < read_data2 [63:0] $end
     $var wire 1 $! write_enable_a $end
     $var wire 5 + write_addr_a [4:0] $end
     $var wire 64 -! write_data_a [63:0] $end
     $var wire 1 @! write_enable_b $end
     $var wire 5 A! write_addr_b [4:0] $end
     $var wire 64 B! write_data_b [63:0] $end
     $var wire 5 A! ext_address1 [4:0] $end
     $var wire 5 A! ext_address2 [4:0] $end
     $var wire 64 B! ext_data1 [63:0] $end
     $var wire 64 B! ext_data2 [63:0] $end
     $var wire 32 >! reg_pending_writes [31:0] $end
     $var wire 64 > registers[0] [63:0] $end
     $var wire 64 @ registers[1] [63:0] $end
     $var wire 64 B registers[2] [63:0] $end
     $var wire 64 D registers[3] [63:0] $end
     $var wire 64 F registers[4] [63:0] $end
     $var wire 64 H registers[5] [63:0] $end
     $var wire 64 J registers[6] [63:0] $end
     $var wire 64 L registers[7] [63:0] $end
     $var wire 64 N registers[8] [63:0] $end
     $var wire 64 P registers[9] [63:0] $end
     $var wire 64 R registers[10] [63:0] $end
     $var wire 64 T registers[11] [63:0] $end
     $var wire 64 V registers[12] [63:0] $end
     $var wire 64 X registers[13] [63:0] $end
     $var wire 64 Z registers[14] [63:0] $end
     $var wire 64 \ registers[15] [63:0] $end
     $var wire 64 ^ registers[16] [63:0] $end
     $var wire 64 ` registers[17] [63:0] $end
     $var wire 64 b registers[18] [63:0] $end
     $var wire 64 d registers[19] [63:0] $end
     $var wire 64 f registers[20] [63:0] $end
     $var wire 64 h registers[21] [63:0] $end
     $var wire 64 j registers[22] [63:0] $end
     $var wire 64 l registers[23] [63:0] $end
     $var wire 64 n registers[24] [63:0] $end
     $var wire 64 p registers[25] [63:0] $end
     $var wire 64 r registers[26] [63:0] $end
     $var wire 64 t registers[27] [63:0] $end
     $var wire 64 v registers[28] [63:0] $end
     $var wire 64 x registers[29] [63:0] $end
     $var wire 64 z registers[30] [63:0] $end
     $var wire 64 | registers[31] [63:0] $end
     $var wire 32 >! scoreboard [31:0] $end
     $scope module unnamedblk1 $end
      $var wire 32 ?! i [31:0] $end
     $upscope $end
    $upscope $end
    $scope module signext_unit $end
     $var wire 32 / raw_instr [31:0] $end
     $var wire 3 !! imm_source [2:0] $end
     $var wire 64 "! immediate [63:0] $end
     $var wire 64 0 imm_i [63:0] $end
     $var wire 64 2 imm_s [63:0] $end
     $var wire 64 4 imm_b [63:0] $end
     $var wire 64 6 imm_j [63:0] $end
     $var wire 64 8 imm_u [63:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
b0000000000000000000000000000000000000000000000000000000000000000 $
b0000000000000000000000000000000000000000000000000000000000000000 &
0(
b00000 )
b00000 *
b00000 +
b0000000 ,
b000 -
b0000000 .
b00000000000000000000000000000000 /
b0000000000000000000000000000000000000000000000000000000000000000 0
b0000000000000000000000000000000000000000000000000000000000000000 2
b0000000000000000000000000000000000000000000000000000000000000000 4
b0000000000000000000000000000000000000000000000000000000000000000 6
b0000000000000000000000000000000000000000000000000000000000000000 8
b0000000000000000000000000000000000000000000000000000000000000000 :
b0000000000000000000000000000000000000000000000000000000000000000 <
b0000000000000000000000000000000000000000000000000000000000000000 >
b0000000000000000000000000000000000000000000000000000000000000000 @
b0000000000000000000000000000000000000000000000000000000000000000 B
b0000000000000000000000000000000000000000000000000000000000000000 D
b0000000000000000000000000000000000000000000000000000000000000000 F
b0000000000000000000000000000000000000000000000000000000000000000 H
b0000000000000000000000000000000000000000000000000000000000000000 J
b0000000000000000000000000000000000000000000000000000000000000000 L
b0000000000000000000000000000000000000000000000000000000000000000 N
b0000000000000000000000000000000000000000000000000000000000000000 P
b0000000000000000000000000000000000000000000000000000000000000000 R
b0000000000000000000000000000000000000000000000000000000000000000 T
b0000000000000000000000000000000000000000000000000000000000000000 V
b0000000000000000000000000000000000000000000000000000000000000000 X
b0000000000000000000000000000000000000000000000000000000000000000 Z
b0000000000000000000000000000000000000000000000000000000000000000 \
b0000000000000000000000000000000000000000000000000000000000000000 ^
b0000000000000000000000000000000000000000000000000000000000000000 `
b0000000000000000000000000000000000000000000000000000000000000000 b
b0000000000000000000000000000000000000000000000000000000000000000 d
b0000000000000000000000000000000000000000000000000000000000000000 f
b0000000000000000000000000000000000000000000000000000000000000000 h
b0000000000000000000000000000000000000000000000000000000000000000 j
b0000000000000000000000000000000000000000000000000000000000000000 l
b0000000000000000000000000000000000000000000000000000000000000000 n
b0000000000000000000000000000000000000000000000000000000000000000 p
b0000000000000000000000000000000000000000000000000000000000000000 r
b0000000000000000000000000000000000000000000000000000000000000000 t
b0000000000000000000000000000000000000000000000000000000000000000 v
b0000000000000000000000000000000000000000000000000000000000000000 x
b0000000000000000000000000000000000000000000000000000000000000000 z
b0000000000000000000000000000000000000000000000000000000000000000 |
0~
b000 !!
b0000000000000000000000000000000000000000000000000000000000000000 "!
0$!
0%!
0&!
0'!
0(!
b0000 )!
b00000000 *!
b0000000000000000000000000000000000000000000000000000000000000000 +!
b0000000000000000000000000000000000000000000000000000000000000000 -!
b0000000000000000000000000000000000000000000000000000000000000000 /!
11!
b00000 2!
b00000000000000000000000000000000 3!
04!
b0000000000000000000000000000000000000000000000000000000000000000 5!
07!
08!
b0000000000000000000000000000000000000000000000000000000000000100 9!
0;!
0<!
0=!
b00000000000000000000000000000000 >!
b00000000000000000000000000000000 ?!
0@!
b00000 A!
b0000000000000000000000000000000000000000000000000000000000000000 B!
b0110011 D!
b0010011 E!
b0000011 F!
b0100011 G!
b1100011 H!
b1101111 I!
b1100111 J!
b0010111 K!
b0110111 L!
b0001011 M!
b0000001 N!
b0000010 O!
b00 P!
b01 Q!
b10 R!
b000 S!
b001 T!
b010 U!
b100 V!
b101 W!
b110 X!
#5000
14!
b00000000000000000000000000100000 ?!
#10000
1#
b0000000000000000000000000000000000000000011100110000010100110011 $
b00110 )
b00111 *
b01010 +
b0110011 ,
b00000000011100110000010100110011 /
b0000000000000000000000000000000000000000000000000000000000000111 0
b0000000000000000000000000000000000000000000000000000000000001010 2
b0000000000000000000000000000000000000000000000000000000000001010 4
b0000000000000000000000000000000000000000000000110000100000000110 6
b0000000000000000000000000000000000000000011100110000000000000000 8
b0000000000000000000000000000000000000000000000000000000000011001 :
b0000000000000000000000000000000000000000000000000000000000010001 <
b0000000000000000000000000000000000000000000000000000000000011001 J
b0000000000000000000000000000000000000000000000000000000000010001 L
b0000000000000000000000000000000000000000000000000000000000000111 "!
1$!
b0000000000000000000000000000000000000000000000000000000000010001 /!
b10001 2!
04!
#15000
14!
b0000000000000000000000000000000000000000000000000000000000000100 5!
b0000000000000000000000000000000000000000000000000000000000001000 9!
b00000000000000000000010000000000 >!
#20000
04!
#25000
14!
b0000000000000000000000000000000000000000000000000000000000001000 5!
b0000000000000000000000000000000000000000000000000000000000001100 9!
#30000
04!
#35000
14!
b0000000000000000000000000000000000000000000000000000000000001100 5!
b0000000000000000000000000000000000000000000000000000000000010000 9!
#40000
04!
#45000
14!
b0000000000000000000000000000000000000000000000000000000000010000 5!
b0000000000000000000000000000000000000000000000000000000000010100 9!
#50000
04!
#55000
14!
b0000000000000000000000000000000000000000000000000000000000010100 5!
b0000000000000000000000000000000000000000000000000000000000011000 9!
#60000
04!
#65000
14!
b0000000000000000000000000000000000000000000000000000000000011000 5!
b0000000000000000000000000000000000000000000000000000000000011100 9!
#70000
04!
