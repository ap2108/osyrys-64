$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $scope module osyrys64_pkg $end
   $var wire 7 / OPCODE_R [6:0] $end
   $var wire 7 0 OPCODE_I [6:0] $end
   $var wire 7 1 OPCODE_L [6:0] $end
   $var wire 7 2 OPCODE_S [6:0] $end
   $var wire 7 3 OPCODE_B [6:0] $end
   $var wire 7 4 OPCODE_JAL [6:0] $end
   $var wire 7 5 OPCODE_JALR [6:0] $end
   $var wire 7 6 OPCODE_AUIPC [6:0] $end
   $var wire 7 7 OPCODE_LUI [6:0] $end
   $var wire 7 8 OPCODE_NPU [6:0] $end
   $var wire 7 9 FUNCT7_MATRIX_MUL [6:0] $end
   $var wire 7 : FUNCT7_CONVOLUTION [6:0] $end
   $var wire 2 ; NPU_OP_NONE [1:0] $end
   $var wire 2 < NPU_OP_MATMUL [1:0] $end
   $var wire 2 = NPU_OP_CONV [1:0] $end
   $var wire 3 > F3_BYTE [2:0] $end
   $var wire 3 ? F3_HALFWORD [2:0] $end
   $var wire 3 @ F3_WORD [2:0] $end
   $var wire 3 A F3_BYTE_U [2:0] $end
   $var wire 3 B F3_HALFWORD_U [2:0] $end
   $var wire 3 C F3_WORD_U [2:0] $end
  $upscope $end
  $scope module control_tb $end
   $var wire 7 , opcode [6:0] $end
   $var wire 3 - funct3 [2:0] $end
   $var wire 7 . funct7 [6:0] $end
   $var wire 4 # alu_control [3:0] $end
   $var wire 1 $ reg_write_en $end
   $var wire 1 % alu_src $end
   $var wire 1 & mem_read $end
   $var wire 1 ' mem_write $end
   $var wire 1 ( mem_to_reg $end
   $var wire 1 ) branch $end
   $var wire 1 * is_npu_matrix_mul $end
   $var wire 1 + is_npu_conv $end
   $scope module dut $end
    $var wire 7 , opcode [6:0] $end
    $var wire 3 - funct3 [2:0] $end
    $var wire 7 . funct7 [6:0] $end
    $var wire 4 # alu_control [3:0] $end
    $var wire 1 $ reg_write_en $end
    $var wire 1 % alu_src $end
    $var wire 1 & mem_read $end
    $var wire 1 ' mem_write $end
    $var wire 1 ( mem_to_reg $end
    $var wire 1 ) branch $end
    $var wire 1 * is_npu_matrix_mul $end
    $var wire 1 + is_npu_conv $end
    $var wire 4 # alu_control_enum [3:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b0000 #
1$
0%
0&
0'
0(
0)
0*
0+
b0110011 ,
b000 -
b0000000 .
b0110011 /
b0010011 0
b0000011 1
b0100011 2
b1100011 3
b1101111 4
b1100111 5
b0010111 6
b0110111 7
b0001011 8
b0000001 9
b0000010 :
b00 ;
b01 <
b10 =
b000 >
b001 ?
b010 @
b100 A
b101 B
b110 C
#10000
b0001 #
b0100000 .
#20000
b0000 #
1%
1&
1(
b0000011 ,
b010 -
b0000000 .
#30000
0$
0&
1'
0(
b0100011 ,
#40000
b0001 #
0%
0'
1)
b1100011 ,
b000 -
#50000
b0000 #
0)
1*
b0001011 ,
b0000001 .
#60000
0*
1+
b0000010 .
#70000
